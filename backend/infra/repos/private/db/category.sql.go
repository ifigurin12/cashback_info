// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const listCategories = `-- name: ListCategories :many
SELECT
    id,
    title,
    bank_type,
    date_created,
    description
FROM
    categories
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.BankType,
			&i.DateCreated,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategoriesByCardIDs = `-- name: ListCategoriesByCardIDs :many
SELECT
    cc.card_id,
    c.id,
    c.title,
    c.bank_type,
    c.description,
    c.date_created
FROM
    cards_categories cc
    JOIN categories c ON cc.category_id = c.id
WHERE
    cc.card_id = ANY($1::UUID[])
`

type ListCategoriesByCardIDsRow struct {
	CardID      uuid.UUID
	ID          uuid.UUID
	Title       string
	BankType    BankTypes
	Description *string
	DateCreated pgtype.Timestamp
}

func (q *Queries) ListCategoriesByCardIDs(ctx context.Context, cardIds []uuid.UUID) ([]ListCategoriesByCardIDsRow, error) {
	rows, err := q.db.Query(ctx, listCategoriesByCardIDs, cardIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCategoriesByCardIDsRow
	for rows.Next() {
		var i ListCategoriesByCardIDsRow
		if err := rows.Scan(
			&i.CardID,
			&i.ID,
			&i.Title,
			&i.BankType,
			&i.Description,
			&i.DateCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
