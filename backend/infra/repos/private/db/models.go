// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type BankTypes string

const (
	BankTypesVtb     BankTypes = "vtb"
	BankTypesAlfa    BankTypes = "alfa"
	BankTypesTinkoff BankTypes = "tinkoff"
	BankTypesPochta  BankTypes = "pochta"
	BankTypesGazprom BankTypes = "gazprom"
)

func (e *BankTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BankTypes(s)
	case string:
		*e = BankTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for BankTypes: %T", src)
	}
	return nil
}

type NullBankTypes struct {
	BankTypes BankTypes
	Valid     bool // Valid is true if BankTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBankTypes) Scan(value interface{}) error {
	if value == nil {
		ns.BankTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BankTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBankTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BankTypes), nil
}

type RoleTypes string

const (
	RoleTypesDefault      RoleTypes = "default"
	RoleTypesFamilyMember RoleTypes = "family_member"
	RoleTypesFamilyLeader RoleTypes = "family_leader"
	RoleTypesAdmin        RoleTypes = "admin"
)

func (e *RoleTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoleTypes(s)
	case string:
		*e = RoleTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for RoleTypes: %T", src)
	}
	return nil
}

type NullRoleTypes struct {
	RoleTypes RoleTypes
	Valid     bool // Valid is true if RoleTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoleTypes) Scan(value interface{}) error {
	if value == nil {
		ns.RoleTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoleTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoleTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoleTypes), nil
}

type Card struct {
	ID            uuid.UUID
	Title         string
	UserID        uuid.UUID
	BankType      BankTypes
	DateCreated   pgtype.Timestamp
	LastUpdatedAt pgtype.Timestamp
}

type CardsCategory struct {
	CardID     uuid.UUID
	CategoryID uuid.UUID
}

type CategoriesMccCode struct {
	CategoryID uuid.UUID
	MccCode    string
}

type Category struct {
	ID          uuid.UUID
	Title       string
	BankType    BankTypes
	DateCreated pgtype.Timestamp
	Description *string
}

type FamiliesUser struct {
	UserID   uuid.UUID
	FamilyID uuid.UUID
}

type Family struct {
	ID          uuid.UUID
	Title       string
	LeaderID    uuid.UUID
	DateCreated pgtype.Timestamp
}

type MccDictionary struct {
	ID          int32
	Code        string
	Description *string
}

type User struct {
	ID           uuid.UUID
	Username     string
	Email        string
	Phone        *string
	PasswordHash string
	RoleType     NullRoleTypes
	DateCreated  pgtype.Timestamp
}
